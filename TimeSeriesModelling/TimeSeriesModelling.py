import pandas as pd
import numpy as np
from datetime import datetime
import re
import os
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, date
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from itertools import cycle
from collections import defaultdict
from typing import Dict, Tuple, Iterable, Optional


# eurostat_datasets = {'Unemployment Rate' :
#  {'dataset_code' : 'une_rt_q',
#  'frequency' : 'q',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/une_rt_q/1.0/*.*.*.*.*.*?c[freq]=Q&c[s_adj]=SA&c[age]=Y20-64&c[unit]=PC_ACT&c[sex]=T&c[geo]=SI,BA,ME,MK,RS&c[TIME_PERIOD]=ge:2006-Q1+le:2023-Q4&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},
                     
#  'Gross domestic product (GDP) (2015 = 100)' :
#  {'dataset_code' : 'nama_10_gdp',
#  'frequency' : 'a',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/nama_10_gdp/1.0/*.*.*.*?c[freq]=A&c[unit]=CLV_I15&c[na_item]=B1GQ&c[geo]=SI,BA,ME,MK,RS,XK&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Gross domestic product (GDP) (percentage change on previous)' :    
#  {'dataset_code' : 'nama_10_gdp',
#  'frequency' : 'a',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/nama_10_gdp/1.0/*.*.*.*?c[freq]=A&c[unit]=CLV_PCH_PRE&c[na_item]=B1GQ&c[geo]=SI,BA,ME,MK,RS,XK&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Money Market Interest Rate' : 
#  {'dataset_code' : 'irt_st_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/irt_st_m/1.0/*.*.*?c[freq]=M&c[int_rt]=IRT_M12&c[geo]=EA&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Interest rate'},

#  'House price index (2015 = 100)' : 
#  {'dataset_code' : 'prc_hpi_q',
#  'frequency' : 'q',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hpi_q/1.0/*.*.*.*?c[freq]=Q&c[purchase]=TOTAL&c[unit]=I15_Q&c[geo]=SI&c[TIME_PERIOD]=2023-Q4,2023-Q3,2023-Q2,2023-Q1,2022-Q4,2022-Q3,2022-Q2,2022-Q1,2021-Q4,2021-Q3,2021-Q2,2021-Q1,2020-Q4,2020-Q3,2020-Q2,2020-Q1,2019-Q4,2019-Q3,2019-Q2,2019-Q1,2018-Q4,2018-Q3,2018-Q2,2018-Q1,2017-Q4,2017-Q3,2017-Q2,2017-Q1,2016-Q4,2016-Q3,2016-Q2,2016-Q1,2015-Q4,2015-Q3,2015-Q2,2015-Q1,2014-Q4,2014-Q3,2014-Q2,2014-Q1,2013-Q4,2013-Q3,2013-Q2,2013-Q1,2012-Q4,2012-Q3,2012-Q2,2012-Q1,2011-Q4,2011-Q3,2011-Q2,2011-Q1,2010-Q4,2010-Q3,2010-Q2,2010-Q1,2009-Q4,2009-Q3,2009-Q2,2009-Q1,2008-Q4,2008-Q3,2008-Q2,2008-Q1,2007-Q4,2007-Q3,2007-Q2,2007-Q1,2006-Q4,2006-Q3,2006-Q2,2006-Q1&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'House price index (quarterly rate of change)':
#  {'dataset_code' : 'prc_hpi_q',
#  'frequency' : 'q',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hpi_q/1.0/*.*.*.*?c[freq]=Q&c[purchase]=TOTAL&c[unit]=RCH_Q&c[geo]=SI&c[TIME_PERIOD]=2023-Q4,2023-Q3,2023-Q2,2023-Q1,2022-Q4,2022-Q3,2022-Q2,2022-Q1,2021-Q4,2021-Q3,2021-Q2,2021-Q1,2020-Q4,2020-Q3,2020-Q2,2020-Q1,2019-Q4,2019-Q3,2019-Q2,2019-Q1,2018-Q4,2018-Q3,2018-Q2,2018-Q1,2017-Q4,2017-Q3,2017-Q2,2017-Q1,2016-Q4,2016-Q3,2016-Q2,2016-Q1,2015-Q4,2015-Q3,2015-Q2,2015-Q1,2014-Q4,2014-Q3,2014-Q2,2014-Q1,2013-Q4,2013-Q3,2013-Q2,2013-Q1,2012-Q4,2012-Q3,2012-Q2,2012-Q1,2011-Q4,2011-Q3,2011-Q2,2011-Q1,2010-Q4,2010-Q3,2010-Q2,2010-Q1,2009-Q4,2009-Q3,2009-Q2,2009-Q1,2008-Q4,2008-Q3,2008-Q2,2008-Q1,2007-Q4,2007-Q3,2007-Q2,2007-Q1,2006-Q4,2006-Q3,2006-Q2,2006-Q1&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Harmonised Index of Consumer Prices (monthly index)':
#  {'dataset_code' : 'prc_hicp_midx',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hicp_midx/1.0/*.*.*.*?c[freq]=M&c[unit]=I15&c[coicop]=CP00&c[geo]=SI,ME,MK,RS,XK&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Harmonised Index of Consumer Prices (annual rate of change)':
#  {'dataset_code' : 'prc_hicp_manr',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hicp_manr/1.0/*.*.*.*?c[freq]=M&c[unit]=RCH_A&c[coicop]=CP00&c[geo]=SI,ME,MK,RS,XK&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence indicator':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-CSMCI&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI,ME,MK,RS&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - financial last 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-FS-LY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI,ME,MK,RS&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - financial next 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-FS-NY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI,ME,MK,RS&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - general economic last 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-GES-LY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI,ME,MK,RS&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - general economic next 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-GES-NY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI,ME,MK,RS&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Government deficit/surplus':
#  {'dataset_code' : 'gov_10dd_edpt1',
#  'frequency' : 'a',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/gov_10dd_edpt1/1.0/*.*.*.*.*?c[freq]=A&c[unit]=PC_GDP&c[sector]=S13&c[na_item]=B9&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Private sectror credit flow':
#  {'dataset_code' : 'tipspc10',
#  'frequency' : 'a',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/tipspc10/1.0/*.*.*.*.*.*.*?c[freq]=A&c[co_nco]=CO&c[sector]=S11_S14_S15&c[finpos]=LIAB&c[na_item]=F3_F4&c[unit]=PC_GDP&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'}
#                     }

eurostat_datasets = {'Unemployment Rate' :
 {'dataset_code' : 'une_rt_q',
 'frequency' : 'q',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/une_rt_q/1.0/*.*.*.*.*.*?c[freq]=Q&c[s_adj]=SA&c[age]=Y20-64&c[unit]=PC_ACT&c[sex]=T&c[geo]=SI&c[TIME_PERIOD]=ge:2006-Q1+le:2023-Q4&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'linear_interpolate'},
                     
 'Gross domestic product (GDP) (2015 = 100)' :
 {'dataset_code' : 'nama_10_gdp',
 'frequency' : 'a',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/nama_10_gdp/1.0/*.*.*.*?c[freq]=A&c[unit]=CLV_I15&c[na_item]=B1GQ&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'nearest_value'},

 'Gross domestic product (GDP) (percentage change on previous)' :    
 {'dataset_code' : 'nama_10_gdp',
 'frequency' : 'a',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/nama_10_gdp/1.0/*.*.*.*?c[freq]=A&c[unit]=CLV_PCH_PRE&c[na_item]=B1GQ&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'nearest_value'},

 'Money Market Interest Rate' : 
 {'dataset_code' : 'irt_st_m',
 'frequency' : 'm',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/irt_st_m/1.0/*.*.*?c[freq]=M&c[int_rt]=IRT_M12&c[geo]=EA&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Interest rate',
 'resample_method' : 'last',
 'fill_missing' : 'nearest_value'},

 'House price index (2015 = 100)' : 
 {'dataset_code' : 'prc_hpi_q',
 'frequency' : 'q',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hpi_q/1.0/*.*.*.*?c[freq]=Q&c[purchase]=TOTAL&c[unit]=I15_Q&c[geo]=SI&c[TIME_PERIOD]=2023-Q4,2023-Q3,2023-Q2,2023-Q1,2022-Q4,2022-Q3,2022-Q2,2022-Q1,2021-Q4,2021-Q3,2021-Q2,2021-Q1,2020-Q4,2020-Q3,2020-Q2,2020-Q1,2019-Q4,2019-Q3,2019-Q2,2019-Q1,2018-Q4,2018-Q3,2018-Q2,2018-Q1,2017-Q4,2017-Q3,2017-Q2,2017-Q1,2016-Q4,2016-Q3,2016-Q2,2016-Q1,2015-Q4,2015-Q3,2015-Q2,2015-Q1,2014-Q4,2014-Q3,2014-Q2,2014-Q1,2013-Q4,2013-Q3,2013-Q2,2013-Q1,2012-Q4,2012-Q3,2012-Q2,2012-Q1,2011-Q4,2011-Q3,2011-Q2,2011-Q1,2010-Q4,2010-Q3,2010-Q2,2010-Q1,2009-Q4,2009-Q3,2009-Q2,2009-Q1,2008-Q4,2008-Q3,2008-Q2,2008-Q1,2007-Q4,2007-Q3,2007-Q2,2007-Q1,2006-Q4,2006-Q3,2006-Q2,2006-Q1&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'nearest_value'},

#  'House price index (quarterly rate of change)':
#  {'dataset_code' : 'prc_hpi_q',
#  'frequency' : 'q',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hpi_q/1.0/*.*.*.*?c[freq]=Q&c[purchase]=TOTAL&c[unit]=RCH_Q&c[geo]=SI&c[TIME_PERIOD]=2023-Q4,2023-Q3,2023-Q2,2023-Q1,2022-Q4,2022-Q3,2022-Q2,2022-Q1,2021-Q4,2021-Q3,2021-Q2,2021-Q1,2020-Q4,2020-Q3,2020-Q2,2020-Q1,2019-Q4,2019-Q3,2019-Q2,2019-Q1,2018-Q4,2018-Q3,2018-Q2,2018-Q1,2017-Q4,2017-Q3,2017-Q2,2017-Q1,2016-Q4,2016-Q3,2016-Q2,2016-Q1,2015-Q4,2015-Q3,2015-Q2,2015-Q1,2014-Q4,2014-Q3,2014-Q2,2014-Q1,2013-Q4,2013-Q3,2013-Q2,2013-Q1,2012-Q4,2012-Q3,2012-Q2,2012-Q1,2011-Q4,2011-Q3,2011-Q2,2011-Q1,2010-Q4,2010-Q3,2010-Q2,2010-Q1,2009-Q4,2009-Q3,2009-Q2,2009-Q1,2008-Q4,2008-Q3,2008-Q2,2008-Q1,2007-Q4,2007-Q3,2007-Q2,2007-Q1,2006-Q4,2006-Q3,2006-Q2,2006-Q1&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Harmonised Index of Consumer Prices (monthly index)':
#  {'dataset_code' : 'prc_hicp_midx',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hicp_midx/1.0/*.*.*.*?c[freq]=M&c[unit]=I15&c[coicop]=CP00&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure',
#  'resample_method' : 'last'},

 'Harmonised Index of Consumer Prices (annual rate of change)':
 {'dataset_code' : 'prc_hicp_manr',
 'frequency' : 'm',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/prc_hicp_manr/1.0/*.*.*.*?c[freq]=M&c[unit]=RCH_A&c[coicop]=CP00&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'resample_method' : 'mean',
 'fill_missing' : 'nearest_value'},

 'Consumer confidence indicator':
 {'dataset_code' : 'ei_bsco_m',
 'frequency' : 'm',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-CSMCI&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'resample_method' : 'mean',
 'fill_missing' : 'nearest_value'},

#  'Consumer confidence - financial last 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-FS-LY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - financial next 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-FS-NY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - general economic last 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-GES-LY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

#  'Consumer confidence - general economic next 12 months':
#  {'dataset_code' : 'ei_bsco_m',
#  'frequency' : 'm',
#  'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-GES-NY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
#  'unit_column_name' : 'Unit of measure'},

 'Government deficit/surplus':
 {'dataset_code' : 'gov_10dd_edpt1',
 'frequency' : 'a',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/gov_10dd_edpt1/1.0/*.*.*.*.*?c[freq]=A&c[unit]=PC_GDP&c[sector]=S13&c[na_item]=B9&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'nearest_value'},

 'Private sectror credit flow':
 {'dataset_code' : 'tipspc10',
 'frequency' : 'a',
 'url' : 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/tipspc10/1.0/*.*.*.*.*.*.*?c[freq]=A&c[co_nco]=CO&c[sector]=S11_S14_S15&c[finpos]=LIAB&c[na_item]=F3_F4&c[unit]=PC_GDP&c[geo]=SI&c[TIME_PERIOD]=2023,2022,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011,2010,2009,2008,2007,2006&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name',
 'unit_column_name' : 'Unit of measure',
 'fill_missing' : 'nearest_value'}
                    }



# Inspect data set
url_dts = 'https://ec.europa.eu/eurostat/api/dissemination/sdmx/3.0/data/dataflow/ESTAT/ei_bsco_m/1.0/*.*.*.*.*?c[freq]=M&c[indic]=BS-GES-NY&c[s_adj]=SA&c[unit]=BAL&c[geo]=SI&c[TIME_PERIOD]=2023-12,2023-11,2023-10,2023-09,2023-08,2023-07,2023-06,2023-05,2023-04,2023-03,2023-02,2023-01,2022-12,2022-11,2022-10,2022-09,2022-08,2022-07,2022-06,2022-05,2022-04,2022-03,2022-02,2022-01,2021-12,2021-11,2021-10,2021-09,2021-08,2021-07,2021-06,2021-05,2021-04,2021-03,2021-02,2021-01,2020-12,2020-11,2020-10,2020-09,2020-08,2020-07,2020-06,2020-05,2020-04,2020-03,2020-02,2020-01,2019-12,2019-11,2019-10,2019-09,2019-08,2019-07,2019-06,2019-05,2019-04,2019-03,2019-02,2019-01,2018-12,2018-11,2018-10,2018-09,2018-08,2018-07,2018-06,2018-05,2018-04,2018-03,2018-02,2018-01,2017-12,2017-11,2017-10,2017-09,2017-08,2017-07,2017-06,2017-05,2017-04,2017-03,2017-02,2017-01,2016-12,2016-11,2016-10,2016-09,2016-08,2016-07,2016-06,2016-05,2016-04,2016-03,2016-02,2016-01,2015-12,2015-11,2015-10,2015-09,2015-08,2015-07,2015-06,2015-05,2015-04,2015-03,2015-02,2015-01,2014-12,2014-11,2014-10,2014-09,2014-08,2014-07,2014-06,2014-05,2014-04,2014-03,2014-02,2014-01,2013-12,2013-11,2013-10,2013-09,2013-08,2013-07,2013-06,2013-05,2013-04,2013-03,2013-02,2013-01,2012-12,2012-11,2012-10,2012-09,2012-08,2012-07,2012-06,2012-05,2012-04,2012-03,2012-02,2012-01,2011-12,2011-11,2011-10,2011-09,2011-08,2011-07,2011-06,2011-05,2011-04,2011-03,2011-02,2011-01,2010-12,2010-11,2010-10,2010-09,2010-08,2010-07,2010-06,2010-05,2010-04,2010-03,2010-02,2010-01,2009-12,2009-11,2009-10,2009-09,2009-08,2009-07,2009-06,2009-05,2009-04,2009-03,2009-02,2009-01,2008-12,2008-11,2008-10,2008-09,2008-08,2008-07,2008-06,2008-05,2008-04,2008-03,2008-02,2008-01,2007-12,2007-11,2007-10,2007-09,2007-08,2007-07,2007-06,2007-05,2007-04,2007-03,2007-02,2007-01,2006-12,2006-11,2006-10,2006-09,2006-08,2006-07,2006-06,2006-05,2006-04,2006-03,2006-02,2006-01&compress=false&format=csvdata&formatVersion=2.0&lang=en&labels=name'
df = pd.read_csv(url_dts)

# print('Length of the data set = ' + str(len(df)))
# print('Length of the data set / 6 = ' + str(len(df)/6))
# print(2023-2006)
# print(df.head())
print(df['TIME_PERIOD'])
# print(pd.unique(df['Unit of measure']))
print(pd.unique(df['Geopolitical entity (reporting)']))
# print(df.columns)

# def get_nlb_share(country_name):

#     nlb_share = {'Slovenia' : 18377.3, 
#                  'Serbia' : 5715.9, 
#                  'North Macedonia' : 2247.8, 
#                  'Kosovo*' : 1504.9, 
#                  'Bosnia and Herzegovina' : 1222.1 + 1064.6, 
#                  'Montenegro' : 1058.5}

#     return nlb_share[country_name]
def fill_missing_values(df: pd.DataFrame, fill_missing: str = 'linear_interpolate') -> pd.DataFrame:
    """
    Fill missing values in a DataFrame based on a specified strategy.

    Parameters
    ----------
    df : pd.DataFrame
        Input DataFrame (can contain both numeric and non-numeric columns).
    fill_missing : {'linear_interpolate', 'nearest_value', None}, default 'linear_interpolate'
        How to fill missing data:
        - 'linear_interpolate': time-based linear interpolation for numeric columns,
          and forward/back-fill for non-numeric columns.
        - 'nearest_value': forward-fill first, then back-fill (for all columns).
        - None: no filling performed.

    Returns
    -------
    pd.DataFrame
        DataFrame with missing values filled according to the chosen strategy.
    """
    df = df.copy()

    if fill_missing is None:
        return df

    if fill_missing == 'linear_interpolate':
        # Handle numeric columns with time interpolation
        num_cols = df.select_dtypes(include='number').columns
        if len(num_cols) > 0:
            df[num_cols] = df[num_cols].interpolate(method='time')

        # Handle non-numeric columns by forward/back-fill
        non_num_cols = df.columns.difference(num_cols)
        if len(non_num_cols) > 0:
            df[non_num_cols] = df[non_num_cols].ffill().bfill()

    elif fill_missing == 'nearest_value':
        # Fill forward, then back to cover leading NaNs
        df = df.ffill().bfill()

    else:
        raise ValueError("fill_missing must be 'linear_interpolate', 'nearest_value', or None")

    return df

def resample_monthly_to_quarterly(
    df: pd.DataFrame,
    resampling_perscription: str = 'mean',
    fill_missing: str = 'linear_interpolate'
) -> pd.DataFrame:
    """
    Resample a monthly-frequency DataFrame to quarterly frequency.

    Parameters
    ----------
    df : pd.DataFrame
        Input DataFrame with a 'TIME_PERIOD' column (e.g., '2006-01', '2006-02', ...)
        or a DatetimeIndex.
    resampling_perscription : {'mean', 'last'}, default 'mean'
        How to aggregate each quarter:
        - 'mean': average of the 3 months
        - 'last': last available month in the quarter
    fill_missing : {'linear_interpolate', 'nearest_value'}, default 'linear_interpolate'
        How to fill missing months before resampling:
        - 'linear_interpolate': linear interpolation in time
        - 'nearest_value': forward-fill missing months with last known value

    Returns
    -------
    pd.DataFrame
        Quarterly DataFrame with index formatted as 'YYYY-Q#'.
    """
    df = df.copy()

    # If TIME_PERIOD is a column, convert and set as index
    if 'TIME_PERIOD' in df.columns:
        df['TIME_PERIOD'] = pd.to_datetime(df['TIME_PERIOD'], format='%Y-%m')
        df = df.set_index('TIME_PERIOD')
    else:
        df.index = pd.to_datetime(df.index)

    # Build complete monthly index
    full_months = pd.date_range(df.index.min(), df.index.max(), freq='M')
    df = df.reindex(full_months)

    # Fill missing values
    if fill_missing is not None:
        df = fill_missing_values(df, fill_missing)

    # Resample quarterly
    if resampling_perscription == 'mean':
        df_q = df.resample('Q-DEC').mean()
    elif resampling_perscription == 'last':
        df_q = df.resample('Q-DEC').last()
    else:
        raise ValueError("resampling_perscription must be 'mean' or 'last'")

    # Format index as 'YYYY-Q#'
    df_q.index = df_q.index.to_period('Q-DEC').astype(str).str.replace('Q', '-Q')

    return df_q



def retrieve_eurostat_dataset(dataset_dict):
    url = dataset_dict['url']
    time_column_name = 'TIME_PERIOD'
    value_column_name = 'OBS_VALUE'
    country_column_name = 'Geopolitical entity (reporting)'
   
    df = pd.read_csv(url)

    if dataset_dict['fill_missing'] is not None:
        df = fill_missing_values(df, dataset_dict['fill_missing'])

    if 'resample_method' in dataset_dict.keys():
        print(df[time_column_name])
        print(df.head())
        df = resample_monthly_to_quarterly(df, dataset_dict['resample_method'], dataset_dict['fill_missing'])
        print('Resampled to quarterly frequency')
        print(df[time_column_name])
        print(df.head())
    
    countries = pd.unique(df[country_column_name])

    if len(countries) > 1:
        print(dataset_dict['dataset_code'])
        print('Error: more than one country in the dataset')    
        return None
    elif len(countries) == 0:
        print(dataset_dict['dataset_code'])
        print('Error: no country in the dataset')
        return None


    times = df[time_column_name].tolist()
    values = df[value_column_name].tolist()

    vals = pd.to_numeric(df[value_column_name], errors='coerce').to_numpy()

    # scale as a single feature
    scaler = StandardScaler()
    scaled = scaler.fit_transform(vals.reshape(-1, 1)).ravel()


    dataset_dict['times'] = times
    dataset_dict['values'] = values
    dataset_dict['scaled_values'] = scaled.tolist()
    # optional: keep params for inverse_transform later
    dataset_dict['scaler_mean'] = float(scaler.mean_[0])
    dataset_dict['scaler_scale'] = float(scaler.scale_[0])

    # time_unit = get_eurostat_time_unit(times[0])


    return dataset_dict



def compute_time_distance(nlb_time, eurostat_time):
    """
    Compute the signed distance between an NLB date and a Eurostat period, in Eurostat units.

    NLB time accepted formats/types:
      - 'MM/DD/YYYY'  (e.g., '03/31/2008')
      - 'YYYY-MM-DD'  (e.g., '2008-03-31')
      - 'YYYY-MM-DD HH:MM:SS' (e.g., '2008-03-31 00:00:00')
      - datetime.date / datetime.datetime
      - pandas.Timestamp (duck-typed via .to_pydatetime(), if present)

    Eurostat formats (auto-detected):
      - Annual:    'YYYY' or 4-digit int (e.g., '2009' or 2009)
      - Quarterly: 'YYYY-Q#' or 'YYYYQ#'  (e.g., '2009-Q1', '2009Q3')
      - Monthly:   'YYYY-MM' or 'YYYY-M' (e.g., '2009-01', '2009-9')

    Returns:
      Signed integer distance in Eurostat units:
        * years if annual
        * quarters if quarterly
        * months if monthly
      Negative => Eurostat period is before NLB date
      Zero     => same period
      Positive => Eurostat period is after NLB date
    """

    # --- Parse NLB time robustly ---
    nlb_dt = _parse_nlb_time(nlb_time)
    nlb_year = nlb_dt.year
    nlb_month = nlb_dt.month
    nlb_quarter = (nlb_month - 1) // 3 + 1  # Jan–Mar=Q1, Apr–Jun=Q2, Jul–Sep=Q3, Oct–Dec=Q4

    # --- Detect & parse Eurostat time ---
    if isinstance(eurostat_time, int):
        euro_unit = "year"
        euro_year = eurostat_time
    else:
        et = str(eurostat_time).strip()

        m_year = re.fullmatch(r"(\d{4})", et)
        m_quarter = re.fullmatch(r"(\d{4})-?Q([1-4])", et, flags=re.IGNORECASE)
        m_month = re.fullmatch(r"(\d{4})-(\d{1,2})", et)

        if m_quarter:
            euro_unit = "quarter"
            euro_year = int(m_quarter.group(1))
            euro_q = int(m_quarter.group(2))
        elif m_month:
            euro_unit = "month"
            euro_year = int(m_month.group(1))
            euro_m = int(m_month.group(2))
            if not (1 <= euro_m <= 12):
                raise ValueError(f"Invalid Eurostat month in '{eurostat_time}'.")
        elif m_year:
            euro_unit = "year"
            euro_year = int(m_year.group(1))
        else:
            raise ValueError(
                f"Unrecognized Eurostat time '{eurostat_time}'. "
                "Use 'YYYY', 'YYYY-Q#' (or 'YYYYQ#'), or 'YYYY-MM'."
            )

    # --- Compute distance in Eurostat units ---
    if euro_unit == "year":
        return euro_year - nlb_year

    if euro_unit == "quarter":
        nlb_q_index = nlb_year * 4 + (nlb_quarter - 1)
        euro_q_index = euro_year * 4 + (euro_q - 1)
        return euro_q_index - nlb_q_index

    if euro_unit == "month":
        nlb_m_index = nlb_year * 12 + (nlb_month - 1)
        euro_m_index = euro_year * 12 + (euro_m - 1)
        return euro_m_index - nlb_m_index

    raise RuntimeError("Unexpected Eurostat unit detection state.")


def _parse_nlb_time(nlb_time):
    """Return a datetime for NLB input supporting common string and datetime-like inputs."""
    # datetime.datetime
    if isinstance(nlb_time, datetime):
        return nlb_time

    # datetime.date (no time)
    if isinstance(nlb_time, date):
        return datetime(nlb_time.year, nlb_time.month, nlb_time.day)

    # pandas.Timestamp (duck-typed)
    if hasattr(nlb_time, "to_pydatetime"):
        return nlb_time.to_pydatetime()

    # Strings: try several common formats
    s = str(nlb_time).strip()
    for fmt in ("%m/%d/%Y", "%Y-%m-%d", "%Y-%m-%d %H:%M:%S"):
        try:
            return datetime.strptime(s, fmt)
        except ValueError:
            pass

    raise ValueError(
        f"Invalid NLB time '{nlb_time}'. "
        "Expected one of: 'MM/DD/YYYY', 'YYYY-MM-DD', 'YYYY-MM-DD HH:MM:SS', "
        "a datetime/date, or a pandas Timestamp."
    )


# # Annual
# assert compute_time_distance("03/31/2008", "2008") == 0
# assert compute_time_distance("12/31/2009", "2008") == -1
# assert compute_time_distance("06/30/2009", 2011) == 2

# # Quarterly (NLB quarter is determined by the NLB date month)
# assert compute_time_distance("03/31/2009", "2009-Q1") == 0   # same quarter
# assert compute_time_distance("06/30/2009", "2009-Q1") == -1  # one quarter before
# assert compute_time_distance("09/30/2009", "2010-Q1") == 2   # two quarters after

# # Monthly
# assert compute_time_distance("03/31/2008", "2008-03") == 0   # same month
# assert compute_time_distance("09/30/2009", "2009-08") == -1  # one month before
# assert compute_time_distance("12/31/2008", "2009-02") == 2   # two months after

def get_eurostat_time_unit(eurostat_time):
    """
    Detect the time unit of a Eurostat time string.

    Eurostat formats:
      - Annual:   '2008' or 2008
      - Quarterly:'2008-Q1', '2008Q2'
      - Monthly:  '2008-01', '2008-1'

    Returns:
      'y' - annual, 'q' - quarterly, 'm' - monthly
    Raises:
      ValueError if the format is not recognized.
    """
    # Handle integer input
    if isinstance(eurostat_time, int):
        return "y"

    et = str(eurostat_time).strip()

    # Match patterns
    if re.fullmatch(r"\d{4}", et):
        return "y"
    elif re.fullmatch(r"\d{4}-?Q[1-4]", et, flags=re.IGNORECASE):
        return "q"
    elif re.fullmatch(r"\d{4}-\d{1,2}", et):
        return "m"
    else:
        raise ValueError(f"Unrecognized Eurostat time format: '{eurostat_time}'")


def compose_modeling_data(eurostat_datasets, scale = True, impute = True, nlb_window = 2, months_window=9, quarters_window=3, annual_window=1, nlb_npl_data_path = '/home/ivan/IskanjeDela/Banking/NLB/datav3/npl_bank.xlsx',data_output_folder = '/home/ivan/IskanjeDela/Banking/NLB/NLB_assignement_Kukuljan/TimeSeriesModelling/data'):

    if not os.path.exists(data_output_folder):
        os.makedirs(data_output_folder)

    if scale:
        if impute:
            data_output_name = f'data_nlb_window_{nlb_window}_months_window_{months_window}_quarters_window_{quarters_window}_annual_window_{annual_window}_scaled_imputed.csv'
        else:
            data_output_name = f'data_nlb_window_{nlb_window}_months_window_{months_window}_quarters_window_{quarters_window}_annual_window_{annual_window}_scaled.csv' 
    else:
        if impute:
            data_output_name = f'data_nlb_window_{nlb_window}_months_window_{months_window}_quarters_window_{quarters_window}_annual_window_{annual_window}_imputed.csv'
        else:
            data_output_name = f'data_nlb_window_{nlb_window}_months_window_{months_window}_quarters_window_{quarters_window}_annual_window_{annual_window}.csv'

    data_output_path = os.path.join(data_output_folder, data_output_name)

    if os.path.exists(data_output_path):
        return pd.read_csv(data_output_path, index_col='date', parse_dates=['date'])
    else:

        nlb_npl_data = pd.read_excel(nlb_npl_data_path)

        nlb_dates = nlb_npl_data['DATE'].to_list()
        nlb_npl_values = nlb_npl_data['NPL'].to_list()

        data = pd.DataFrame(index=nlb_dates)
        data['npl'] = nlb_npl_values

        if nlb_window > 0:
            for i in range(1, nlb_window + 1):
                data[f'npl-{i}q'] = data['npl'].shift(i)

        if impute:
            lag_cols = [f'npl-{i}q' for i in range(1, nlb_window + 1)]
            data[lag_cols] = data[lag_cols].ffill().bfill()

        dataset_names = eurostat_datasets.keys()
        for dataset_name in dataset_names:
            dataset_data = eurostat_datasets[dataset_name]
            dataset_times = dataset_data['times']
            if scale:
                dataset_values = dataset_data['scaled_values']
            else:
                dataset_values = dataset_data['values']

            


            times_unit = get_eurostat_time_unit(dataset_times[0])

            if times_unit == 'y':
                time_window = annual_window
            elif times_unit == 'q':
                time_window = quarters_window
            elif times_unit == 'm':
                time_window = months_window
            else:
                raise ValueError(f"Unrecognized Eurostat time unit: '{times_unit}'")

            for i in range(time_window+1):
                data[f'{dataset_name}-{i}{times_unit}'] = np.nan
                for nlb_date in nlb_dates:
                    for dataset_time in dataset_times:
                        if compute_time_distance(nlb_date, dataset_time) == -i:
                            print(f'time distance: {i}, nlb_date: {nlb_date}, dataset_time: {dataset_time}')
                            data.loc[nlb_date, f'{dataset_name}-{i}{times_unit}'] = dataset_values[dataset_times.index(dataset_time)]
                            break

            # if impute:
            #     if dataset_name == 'Unemployment Rate':
            #         for i in range(time_window+1):
            #             for j in range(len(data)):
            #                 if (np.isnan(data.iloc[j, f'{dataset_name}-{i}{times_unit}']) and not np.isnan(data.iloc[j+1, f'{dataset_name}-{i}{times_unit}'])):
            #                     start_value = data.iloc[j+1, f'{dataset_name}-{i}{times_unit}']
            #                     delta = data.iloc[j+1, f'{dataset_name}-{i}{times_unit}'] - data.iloc[j+2, f'{dataset_name}-{i}{times_unit}']
            #                     for k in range(j+1, len(data)):
            #                         if np.isnan(data.iloc[k, f'{dataset_name}-{i}{times_unit}']):
            #                             data.iloc[k, f'{dataset_name}-{i}{times_unit}'] = start_value + delta * (k-j)
            #                             break

            if impute:
                if dataset_name == 'Unemployment Rate':
                    for i in range(time_window + 1):
                        col = f'{dataset_name}-{i}{times_unit}'
                        for j in range(len(data) - 2):  # avoid out-of-bounds for j+1, j+2
                            # Check if current row is NaN but next one is not
                            if pd.isna(data.iloc[j][col]) and not pd.isna(data.iloc[j + 1][col]):
                                start_value = data.iloc[j + 1][col]
                                next_value = data.iloc[j + 2][col]

                                # If next_value is NaN, skip this iteration (can't compute delta)
                                if pd.isna(next_value):
                                    continue

                                # Linear step between next two known values (backward extrapolation)
                                delta = start_value - next_value

                                # Fill backwards from j upward until we hit an existing value
                                for k in range(j, -1, -1):  # go backwards
                                    if pd.isna(data.iloc[k][col]):
                                        data.iloc[k, data.columns.get_loc(col)] = start_value + delta * (j + 1 - k)
                                    else:
                                        break

                else:
                    # For all other datasets: nearest available value
                    for i in range(time_window + 1):
                        col = f'{dataset_name}-{i}{times_unit}'
                        if col in data.columns:
                            data[col] = data[col].ffill().bfill()

                

        data.to_csv(data_output_path, index_label='date')
        return data


def extract_dataset_name_delay_and_unit(colname):
    """
    Parse a column name of the form:
        "<dataset name>-<delay><unit>"
    where:
        - <dataset name> can contain hyphens, spaces, parentheses, etc.
        - <delay> is an integer (e.g., 0,1,2,...)
        - <unit> is a single letter (e.g., q=quarter, y=year, m=month)
    
    Examples:
      "npl-1q"                                        -> ("npl", 1, "q")
      "Unemployment Rate-0q"                          -> ("Unemployment Rate", 0, "q")
      "Gross domestic product (2015 = 100)-1y"        -> ("Gross domestic product (2015 = 100)", 1, "y")
      "Consumer confidence - general economic next 12 months-7m"
                                                      -> ("Consumer confidence - general economic next 12 months", 7, "m")
    
    Returns:
        (dataset_name: str, delay: int, unit: str)
    Raises:
        ValueError if the name does not match the expected pattern.
    """
    s = str(colname).strip()
    if "-" not in s:
        raise ValueError(f"Column name missing '-<delay><unit>' suffix: {colname!r}")

    dataset_name, suffix = s.rsplit("-", 1)  # split on the LAST hyphen
    suffix = suffix.strip()

    m = re.fullmatch(r"(\d+)\s*([A-Za-z])", suffix)
    if not m:
        raise ValueError(
            f"Suffix must be '<delay><unit>' like '3q' or '12m'; got {suffix!r} in {colname!r}"
        )

    delay = int(m.group(1))
    unit = m.group(2).lower()  # normalize (e.g., 'Q' -> 'q')

    return dataset_name.strip(), delay, unit

# assert extract_dataset_name_delay_and_unit("npl-1q") == ("npl", 1, "q")
# assert extract_dataset_name_delay_and_unit("Unemployment Rate-0q") == ("Unemployment Rate", 0, "q")
# assert extract_dataset_name_delay_and_unit("Gross domestic product (GDP) (2015 = 100)-1y")[1:] == (1, "y")
# assert extract_dataset_name_delay_and_unit("Consumer confidence - general economic next 12 months-7m")[1:] == (7, "m")


def train_test_split(data, test_1_size=6, test_2_size=6, random_state=None):
    # Make a copy to avoid modifying the original
    data_copy = data.copy()
    
    # Take the last test_2_size rows for test_2
    data_test_2 = data_copy.tail(test_2_size)
    
    # Remove those rows from the copy
    data_remaining = data_copy.iloc[:-test_2_size]
    
    # Randomly sample test_1_size rows from the remaining data
    data_test_1 = data_remaining.sample(n=test_1_size, random_state=random_state)
    
    # The rest go into the training set
    data_train = data_remaining.drop(data_test_1.index)
    
    return data_train, data_test_1, data_test_2


def fit_linear_model_with_time_delay(data):
    y = data['npl']
    x = data.drop(columns=['npl'])
    model = LinearRegression()
    model.fit(x, y)
    return model

def plot_abs_coeff_series_by_dataset(
    model: LinearRegression,
    feature_names: Iterable[str],
    title: Optional[str] = "Absolute model coefficients by dataset/unit (log scale)",
    ax: Optional[plt.Axes] = None,
) -> plt.Axes:
    """
    Group linear model coefficients into time-delay series per (dataset name, unit),
    then plot the absolute values on a single log-y plot. Series are ordered by
    descending max |coef| so the most influential appears first.

    Parameters
    ----------
    model : sklearn.linear_model.LinearRegression (already fit)
        The fitted model containing coef_.
    feature_names : iterable of str
        Must align positionally with model.coef_.
    title : str, optional
        Plot title.
    ax : matplotlib.axes.Axes, optional
        Ax to draw on; if None, a new one is created.

    Returns
    -------
    ax : matplotlib.axes.Axes
        The axes with the plot.

    Notes
    -----
    - Series are grouped by (dataset_name, unit). For example, all
      "Unemployment Rate-<delay>q" are one series, and all "...-<delay>m" would be another.
    - X-axis is the integer delay (0,1,2,...) within each unit.
    - Y-axis is log-scaled absolute coefficient magnitude.
    """
    if not hasattr(model, "coef_"):
        raise ValueError("Model must be fit and have a 'coef_' attribute.")

    coefs = np.asarray(model.coef_, dtype=float)
    names = list(feature_names)

    if coefs.shape[0] != len(names):
        raise ValueError(
            f"Length mismatch: {coefs.shape[0]} coefficients vs {len(names)} feature names."
        )

    # Collect coefficients per (dataset_name, unit) keyed by delay
    grouped: Dict[Tuple[str, str], Dict[int, float]] = defaultdict(dict)

    for name, coef in zip(names, coefs):
        try:
            dataset, delay, unit = extract_dataset_name_delay_and_unit(name)
        except ValueError:
            # If a column doesn't follow the pattern, skip it (or raise if you prefer strict)
            # raise
            continue
        grouped[(dataset, unit)][delay] = float(abs(coef))  # abs values for plotting

    if not grouped:
        raise ValueError("No parsable feature names found to plot.")

    # Build sorted (x,y) per series and compute max |coef| for ordering
    series = []
    for key, mapping in grouped.items():
        delays = sorted(mapping.keys())
        ys = [mapping[d] for d in delays]
        max_abs = max(ys) if ys else 0.0
        series.append({"key": key, "x": delays, "y": ys, "max_abs": max_abs})

    # Order by influence (descending max |coef|)
    series.sort(key=lambda s: s["max_abs"], reverse=True)

    # Prepare plotting surface
    if ax is None:
        # fig, ax = plt.subplots(figsize=(10, 6))
        fig, ax = plt.subplots(figsize=(11, 6))

    # Create a sufficiently large style cycle (colors x linestyles)
    # to keep lines visually distinct.
    # Matplotlib's default prop cycle gives us a bunch of colors;
    # combine with multiple linestyles.
    linestyles = ["-", "--", "-.", ":"]
    prop_cycler = plt.rcParams["axes.prop_cycle"]
    colors = [d.get("color") for d in prop_cycler]
    markers = ["o", "s", "D", "^"]

    styles = [(c, linestyles[i], markers[i]) for c in colors for i in range(len(linestyles))]
    # styles = [(c, ls) for c in colors for ls in linestyles]

    # Plot in the requested order: largest first
    for i, s in enumerate(series):

        color, ls, marker = styles[i % len(styles)]
        dataset, unit = s["key"]
        label = f"{dataset} ({unit})"
        ax.plot(
            s["x"],
            s["y"],
            label=label,
            linestyle=ls,
            color=color,
            marker=marker,
            linewidth=2,
            markersize=6,
            alpha=0.9,
        )


        
        # color, ls = styles[i % len(styles)]
        # (dataset, unit) = s["key"]
        # label = f"{dataset} ({unit})"
        # ax.plot(
        #     s["x"],
        #     s["y"],
        #     label=label,
        #     linestyle=ls,
        #     color=color,
        #     marker="o",
        #     linewidth=2,
        #     markersize=4,
        # )

    ax.set_yscale("log")
    ax.set_xlabel("Delay")
    ax.set_ylabel("|Coefficient| (log scale)")
    if title:
        ax.set_title(title)
    ax.grid(True, which="both", linewidth=0.5, alpha=0.5)
    # ax.legend(loc="best", fontsize=9, ncol=1)
    ax.legend(
        loc="center left",           # position relative to bbox_to_anchor
        bbox_to_anchor=(1.02, 0.5),  # x=1.02 means just outside the right edge
        fontsize=8,
        ncol=1,                      # one column
        frameon=False
    )

    plt.savefig(f'/home/ivan/IskanjeDela/Banking/NLB/NLB_assignement_Kukuljan/TimeSeriesModelling/data/model_coefficients.png',dpi=300,bbox_inches="tight",   # <- include outside artists
    pad_inches=0.1)
    plt.show()
    return ax
                


for key in eurostat_datasets:
    dataset_dict = eurostat_datasets[key]
    dataset_dict = retrieve_eurostat_dataset(dataset_dict)
    eurostat_datasets[key] = dataset_dict
 

print(eurostat_datasets.keys())

# # data = compose_modeling_data(eurostat_datasets, scale=True, impute=True, nlb_window = 2, months_window=6, quarters_window=2, annual_window=1)
# data = compose_modeling_data(eurostat_datasets, scale=True, impute=True, nlb_window = 2, months_window=6, quarters_window=1, annual_window=1)

# print(data.columns)


# data_train, data_test_1, data_test_2 = train_test_split(data, test_1_size=6, test_2_size=6, random_state=42)

# print('data_train dates:')
# print(data_train.index)
# print('data_test_1 dates:')
# print(data_test_1.index)
# print('data_test_2 dates:')
# print(data_test_2.index)

# model = fit_linear_model_with_time_delay(data_train)
# print(model.coef_)
# print(model.intercept_)


print(len(data.columns))
print(len(model.coef_))


ax = plot_abs_coeff_series_by_dataset(model, feature_names=data.drop(columns=['npl']).columns)




# # Plot the data

# num_plots = 1 + len(eurostat_datasets)
# cols = 5
# rows = (num_plots + cols - 1) // cols

# fig, axes = plt.subplots(rows, cols, figsize=(cols * 6, rows * 4), squeeze=False)

# # First subplot: NLB NPL
# ax = axes[0, 0]
# # Ensure the index is parsed as datetime, if not already
# try:
#     idx = pd.to_datetime(data.index.to_list())
# except Exception:
#     idx = data.index.to_list()
# ax.plot(idx, data['npl'])
# ax.set_title('NLB NPL')
# ax.set_xlabel('Date')
# ax.set_ylabel('NPL')
# ax.xaxis.set_major_locator(mdates.YearLocator())
# ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

# # The rest: Eurostat datasets
# plot_i = 1
# for key in eurostat_datasets:
#     r = plot_i // cols
#     c = plot_i % cols
#     ax = axes[r, c]
#     dataset = eurostat_datasets[key]
#     times = dataset['times']
#     values = dataset['values']

#     freq = get_eurostat_time_unit(times[0])

#     if freq == 'a':   # annual
#         x_vals = pd.to_datetime(pd.Series(times).astype(str), format='%Y')
#     elif freq == 'q': # quarterly like '2019-Q4'
#         x_vals = pd.PeriodIndex(times, freq='Q').to_timestamp('Q')
#     elif freq == 'm': # monthly like '2019-12'
#         x_vals = pd.to_datetime(times, format='%Y-%m')
#     else:
#         x_vals = times  # fallback

#     # # Attempt to parse x axis to datetime, if possible
#     # try:
#     #     x_vals = pd.to_datetime(times, errors='coerce')
#     #     if x_vals.isnull().all():
#     #         x_vals = times  # fallback if parsing fails
#     # except Exception:
#     #     x_vals = times

#     ax.plot(x_vals, values)
#     ax.set_title(key)
#     ax.set_xlabel('Time')
#     ax.set_ylabel('Value')
#     if isinstance(x_vals, (pd.Series, pd.DatetimeIndex, list)) and hasattr(x_vals, 'dtype') and str(x_vals.dtype).startswith('datetime'):
#         ax.xaxis.set_major_locator(mdates.YearLocator())
#         ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
#     plot_i += 1

# # Hide any unused subplots
# for n in range(num_plots, rows * cols):
#     r = n // cols
#     c = n % cols
#     fig.delaxes(axes[r, c])

# plt.tight_layout()

# plt.savefig(f'/home/ivan/IskanjeDela/Banking/NLB/NLB_assignement_Kukuljan/TimeSeriesModelling/data/data_plots.png',dpi=300)
# plt.show()





# Train -test -test split

